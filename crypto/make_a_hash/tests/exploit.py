from pwn import *
from Crypto.Hash import SHA256
import binascii

from typing import Iterator


SERVER = None
PORT = None

p = remote(SERVER, PORT)

p.recvuntil("Press Enter to continue to your challenge")
p.sendline(b'')
p.recvuntil("I hashed the hexstring ")
x = bytes.fromhex(p.recvuntil(' ').decode())
p.recvuntil("Please provide your value for x (in hexstring form): ")

def sha(data: bytes) -> bytes:
    algo = SHA256.new(data)
    return algo.digest()

def xor(a: bytes, b: bytes) -> bytes:
    return bytes([x ^ y for x, y in zip(a, b)])

# Evenly split 'data' into 'n' parts
def split_str(data: bytes, n: int) -> Iterator[bytes]:
    if len(data) % n != 0:
        raise ValueError(f"Length of 'data' must be a multiple of {n}")

    section_len = len(data) // n
    return (data[i * section_len : (i + 1) * section_len] for i in range(n))


log.info(f"Looking for preimage of {binascii.hexlify(x).decode()}")

a, b, c = split_str(x, 3)

w = xor(b, xor(sha(a), sha(c)))

w_ = b'\x00' * len(b)
c_ = c
a_ = xor(xor(sha(w_), sha(w)), a)
b_ = xor(w_, xor(sha(a_), sha(c)))

preimage = a_ + b_ + c_

log.success(f"Found preimage: {binascii.hexlify(preimage).decode()}")

p.sendline(binascii.hexlify(preimage))

p.interactive()
