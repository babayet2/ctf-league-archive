import base64
import io
import os

from flask import Blueprint, request, render_template, abort, send_file
from flask.helpers import send_file
from flask_httpauth import HTTPBasicAuth
import sqlalchemy

from .exts import db
from .models import Upload

routes = Blueprint("files", __name__, url_prefix="/", template_folder="templates")
auth = HTTPBasicAuth()

@auth.verify_password
def verify_password(username, password):
    if username == "bot_upload" and password == "e2STMBEYz7^EvSPRBovJ":
    # if username == "admin" and password == "admin":
        return username
    
    return False

@routes.route("/", methods=["GET", "POST"])
@auth.login_required
def template():
    uploads = Upload.query.all()[:int(os.getenv("PANEL_MAX_UPLOAD_DISPLAY", "100"))]
    error = None

    if request.method == "POST":
        requested_upload = Upload.query.filter_by(access_key=request.form["access_key"]).first()

        if requested_upload is None:
            error = "Bad access key"
        else:
            return send_file(io.BytesIO(base64.b64decode(requested_upload.contents.encode())), as_attachment=True, download_name=requested_upload.path.split("\\")[-1].split("/")[-1])

    return render_template("browse_files.html", uploads=uploads, error=error)

@routes.route("/upload", methods=["POST"])
@auth.login_required()
def upload_file():
    if "access_key" not in request.form.keys():
        abort(400)
    
    if "contents" not in request.form.keys():
        abort(400)
    
    if "path" not in request.form.keys():
        abort(400)

    upload = Upload(path=request.form["path"], access_key=request.form["access_key"], contents=request.form["contents"])

    try:
        db.session.add(upload)
        db.session.commit()
    except sqlalchemy.exc.IntegrityError:
        return "duplicate", 400

    return "uploaded"